
from __future__ import absolute_import

import logging, shutil, os
log = logging.getLogger(__name__)

import muz
import muz.vfs
import muz.beatmap

extensions = ["beatmap"]
locations = ["beatmaps"]

VERSION = "1"

class ParseError(Exception):
    pass

def read(fobj):
    buf = ""
    bmap = muz.beatmap.Beatmap(None, 1)
    initialized = False
    essentialParsed = False
    maxnotes = 0

    while True:
        byte = fobj.read(1)

        if not byte:
            break

        if byte in ('\r', '\n'):
            if buf:
                buf = buf.decode('utf-8')

                if buf[0] != '#':
                    s, args = buf.split(' ', 1)

                    if s == "version":
                        if initialized:
                            log.warning("duplicate 'version' statement ignored")
                        else:
                            initialized = True
                            if args != VERSION:
                                log.warning("unsupported version %s", repr(args))
                    elif not initialized:
                        raise ParseError("statement %s encountered before 'version'" % s)
                    elif s == "meta":
                        key, val = args.split(' ', 1)
                        bmap.meta[key] = val
                    elif s == "essential":
                        if essentialParsed:
                            log.warning("duplicate 'essential' statement ignored")
                        else:
                            args = args.split(' ', 2)

                            maxnotes = int(args[0])
                            bmap.numbands = int(args[1])
                            bmap.music = args[2]
                            essentialParsed = True
                    elif s == "note":
                        if essentialParsed:
                            args = args.split(' ')
                            bmap.append(muz.beatmap.Note(
                                *(int(a) for a in args[:2] + [args[2] if len(args) > 2 else 0])
                            ))
                    else:
                        log.warning("unknown statement %s ignored", repr(s))
            buf = ""
            continue

        buf += byte
    
    if len(bmap) < maxnotes:
        log.warning("premature EOF: expected %i notes, got %i", maxnotes, len(bmap))

    if not essentialParsed or not maxnotes > 0:
        raise ParseError("empty beatmap")

    bmap.applyMeta()
    return bmap

def write(bmap, fobj):
    fobj.write(("# generated by %s-%s\nversion 1\nessential %i %i %s\n" %
              (muz.NAME, muz.VERSION, len(bmap), bmap.numbands, bmap.music.encode('utf-8'))).encode('utf-8'))

    for key, val in sorted(bmap.meta.items(), key=lambda p: p[0]):
        fobj.write("meta %s %s\n" % (key, val.encode('utf-8')))

    for note in bmap:
        fobj.write("note %i %i%s\n" % (note.band, note.hitTime, (" " + str(note.holdTime)) if note.holdTime else ""))
